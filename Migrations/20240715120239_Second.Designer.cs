// <auto-generated />
using System;
using BringMeBack.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BringMeBackAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240715120239_Second")]
    partial class Second
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BringMeBackAPI.Models.Associates.Associate", b =>
                {
                    b.Property<int>("AssociateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssociateId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Relationship")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ReportId")
                        .HasColumnType("int");

                    b.HasKey("AssociateId");

                    b.HasIndex("ReportId");

                    b.ToTable("Associates");
                });

            modelBuilder.Entity("BringMeBackAPI.Models.Comments.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"));

                    b.Property<int?>("CommentId1")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ParentCommentId")
                        .HasColumnType("int");

                    b.Property<int?>("ReportId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CommentId");

                    b.HasIndex("CommentId1");

                    b.HasIndex("ReportId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("BringMeBackAPI.Models.Notifications.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("NotificationId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("BringMeBackAPI.Models.Payments.Donation", b =>
                {
                    b.Property<int>("DonationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DonationId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("CommunityMemberId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DonatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DonationType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("DonorSupporterId")
                        .HasColumnType("int");

                    b.Property<int?>("FamilyMemberId")
                        .HasColumnType("int");

                    b.Property<int>("OrganizationUserId")
                        .HasColumnType("int");

                    b.Property<int?>("PublicAuthorityId")
                        .HasColumnType("int");

                    b.Property<int?>("VolunteerId")
                        .HasColumnType("int");

                    b.HasKey("DonationId");

                    b.HasIndex("CommunityMemberId");

                    b.HasIndex("DonorSupporterId");

                    b.HasIndex("FamilyMemberId");

                    b.HasIndex("OrganizationUserId");

                    b.HasIndex("PublicAuthorityId");

                    b.HasIndex("VolunteerId");

                    b.ToTable("Donation");
                });

            modelBuilder.Entity("BringMeBackAPI.Models.Reports.Report", b =>
                {
                    b.Property<int>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<bool>("IsResolved")
                        .HasColumnType("bit");

                    b.Property<string>("ReportType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ReportId");

                    b.HasIndex("UserId");

                    b.ToTable("Reports");

                    b.HasDiscriminator().HasValue("Report");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("BringMeBackAPI.Models.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasDiscriminator().HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("BringMeBackAPI.Models.Verification.OTP", b =>
                {
                    b.Property<int>("OTPId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OTPId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("OTPId");

                    b.HasIndex("UserId");

                    b.ToTable("OTPs");
                });

            modelBuilder.Entity("BringMeBackAPI.Models.Verification.Verification", b =>
                {
                    b.Property<int>("VerificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VerificationId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("VerificationCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("VerificationId");

                    b.HasIndex("UserId");

                    b.ToTable("Verifications");
                });

            modelBuilder.Entity("BringMeBackAPI.Models.Reports.FoundItemReport", b =>
                {
                    b.HasBaseType("BringMeBackAPI.Models.Reports.Report");

                    b.Property<string>("CircumstancesOfFinding")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ConditionOfItemWhenFound")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("FoundDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FoundLocation")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ItemDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhotoOfItem")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReportingPersonEmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReportingPersonName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ReportingPersonPhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UniqueIdentifiers")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("VideoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Reports", t =>
                        {
                            t.Property("FoundDateTime")
                                .HasColumnName("FoundItemReport_FoundDateTime");

                            t.Property("FoundLocation")
                                .HasColumnName("FoundItemReport_FoundLocation");

                            t.Property("ItemDescription")
                                .HasColumnName("FoundItemReport_ItemDescription");

                            t.Property("ItemName")
                                .HasColumnName("FoundItemReport_ItemName");

                            t.Property("PhotoOfItem")
                                .HasColumnName("FoundItemReport_PhotoOfItem");

                            t.Property("SerialNumber")
                                .HasColumnName("FoundItemReport_SerialNumber");

                            t.Property("UniqueIdentifiers")
                                .HasColumnName("FoundItemReport_UniqueIdentifiers");

                            t.Property("VideoUrl")
                                .HasColumnName("FoundItemReport_VideoUrl");
                        });

                    b.HasDiscriminator().HasValue("FoundItemReport");
                });

            modelBuilder.Entity("BringMeBackAPI.Models.Reports.FoundPersonReport", b =>
                {
                    b.HasBaseType("BringMeBackAPI.Models.Reports.Report");

                    b.Property<string>("ClothingAtTimeOfFinding")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ConditionWhenFound")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DistinguishingMarksOrFeatures")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("EstimatedAge")
                        .HasColumnType("int");

                    b.Property<string>("EyeColor")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("FoundDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FoundLocation")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("HairColor")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Height")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ObservedMedicalConditions")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ObservedMedications")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ObservedMentalHealthStatus")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Weight")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.ToTable("Reports", t =>
                        {
                            t.Property("DistinguishingMarksOrFeatures")
                                .HasColumnName("FoundPersonReport_DistinguishingMarksOrFeatures");

                            t.Property("EyeColor")
                                .HasColumnName("FoundPersonReport_EyeColor");

                            t.Property("FullName")
                                .HasColumnName("FoundPersonReport_FullName");

                            t.Property("Gender")
                                .HasColumnName("FoundPersonReport_Gender");

                            t.Property("HairColor")
                                .HasColumnName("FoundPersonReport_HairColor");

                            t.Property("Height")
                                .HasColumnName("FoundPersonReport_Height");

                            t.Property("Nationality")
                                .HasColumnName("FoundPersonReport_Nationality");

                            t.Property("Nickname")
                                .HasColumnName("FoundPersonReport_Nickname");

                            t.Property("Weight")
                                .HasColumnName("FoundPersonReport_Weight");
                        });

                    b.HasDiscriminator().HasValue("FoundPersonReport");
                });

            modelBuilder.Entity("BringMeBackAPI.Models.Reports.ItemReport", b =>
                {
                    b.HasBaseType("BringMeBackAPI.Models.Reports.Report");

                    b.Property<string>("CircumstancesOfLoss")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal?>("EstimatedValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ItemDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastKnownLocation")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("LastSeenDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("OwnerEmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OwnerPhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoOfItem")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("RewardOffered")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UniqueIdentifiers")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("VideoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Reports", t =>
                        {
                            t.Property("LastSeenDateTime")
                                .HasColumnName("ItemReport_LastSeenDateTime");

                            t.Property("VideoUrl")
                                .HasColumnName("ItemReport_VideoUrl");
                        });

                    b.HasDiscriminator().HasValue("ItemReport");
                });

            modelBuilder.Entity("BringMeBackAPI.Models.Reports.PersonReport", b =>
                {
                    b.HasBaseType("BringMeBackAPI.Models.Reports.Report");

                    b.Property<string>("BriefDescriptionOfCircumstances")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ClothingLastSeenWearing")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ContactEmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("DistinguishingMarksOrFeatures")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("EyeColor")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("HairColor")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Height")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("IDNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastSeenDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastSeenLocation")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MedicalConditions")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("MedicationsRequired")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("MentalHealthStatus")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PossibleDestinations")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PrimaryContactPerson")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RecentPhotos")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SocialMediaAccounts")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VideoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Weight")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasDiscriminator().HasValue("PersonReport");
                });

            modelBuilder.Entity("BringMeBackAPI.Models.Users.CommunityMember", b =>
                {
                    b.HasBaseType("BringMeBackAPI.Models.Users.User");

                    b.Property<string>("CommunityAffiliation")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CommunityRole")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Verification")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue("CommunityMember");
                });

            modelBuilder.Entity("BringMeBackAPI.Models.Users.DonorSupporter", b =>
                {
                    b.HasBaseType("BringMeBackAPI.Models.Users.User");

                    b.Property<string>("DonationPreference")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MessageOfSupport")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentInformation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("DonorSupporter");
                });

            modelBuilder.Entity("BringMeBackAPI.Models.Users.FamilyMember", b =>
                {
                    b.HasBaseType("BringMeBackAPI.Models.Users.User");

                    b.Property<string>("DetailsOfMissingPerson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RelationToMissingPerson")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UploadPhoto")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasDiscriminator().HasValue("FamilyMember");
                });

            modelBuilder.Entity("BringMeBackAPI.Models.Users.OrganizationUser", b =>
                {
                    b.HasBaseType("BringMeBackAPI.Models.Users.User");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPerson")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ContactPhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizationName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("OrganizationType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RegistrationNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasDiscriminator().HasValue("OrganizationUser");
                });

            modelBuilder.Entity("BringMeBackAPI.Models.Users.PublicAuthority", b =>
                {
                    b.HasBaseType("BringMeBackAPI.Models.Users.User");

                    b.Property<string>("AccessCredentials")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("Authorization")
                        .HasColumnType("bit");

                    b.Property<string>("PositionOrAgency")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasDiscriminator().HasValue("PublicAuthority");
                });

            modelBuilder.Entity("BringMeBackAPI.Models.Users.Volunteer", b =>
                {
                    b.HasBaseType("BringMeBackAPI.Models.Users.User");

                    b.Property<string>("Availability")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("InterestArea")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("VolunteerExperience")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasDiscriminator().HasValue("Volunteer");
                });

            modelBuilder.Entity("BringMeBackAPI.Models.Associates.Associate", b =>
                {
                    b.HasOne("BringMeBackAPI.Models.Reports.Report", "Report")
                        .WithMany("Associates")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Report");
                });

            modelBuilder.Entity("BringMeBackAPI.Models.Comments.Comment", b =>
                {
                    b.HasOne("BringMeBackAPI.Models.Comments.Comment", null)
                        .WithMany("Replies")
                        .HasForeignKey("CommentId1");

                    b.HasOne("BringMeBackAPI.Models.Reports.Report", null)
                        .WithMany("Comments")
                        .HasForeignKey("ReportId");

                    b.HasOne("BringMeBackAPI.Models.Users.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BringMeBackAPI.Models.Notifications.Notification", b =>
                {
                    b.HasOne("BringMeBackAPI.Models.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BringMeBackAPI.Models.Payments.Donation", b =>
                {
                    b.HasOne("BringMeBackAPI.Models.Users.CommunityMember", null)
                        .WithMany("Donations")
                        .HasForeignKey("CommunityMemberId");

                    b.HasOne("BringMeBackAPI.Models.Users.DonorSupporter", null)
                        .WithMany("Donations")
                        .HasForeignKey("DonorSupporterId");

                    b.HasOne("BringMeBackAPI.Models.Users.FamilyMember", null)
                        .WithMany("Donations")
                        .HasForeignKey("FamilyMemberId");

                    b.HasOne("BringMeBackAPI.Models.Users.OrganizationUser", "Organization")
                        .WithMany("Donations")
                        .HasForeignKey("OrganizationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BringMeBackAPI.Models.Users.PublicAuthority", null)
                        .WithMany("Donations")
                        .HasForeignKey("PublicAuthorityId");

                    b.HasOne("BringMeBackAPI.Models.Users.Volunteer", null)
                        .WithMany("Donations")
                        .HasForeignKey("VolunteerId");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("BringMeBackAPI.Models.Reports.Report", b =>
                {
                    b.HasOne("BringMeBackAPI.Models.Users.User", "User")
                        .WithMany("Reports")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BringMeBackAPI.Models.Verification.OTP", b =>
                {
                    b.HasOne("BringMeBackAPI.Models.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BringMeBackAPI.Models.Verification.Verification", b =>
                {
                    b.HasOne("BringMeBackAPI.Models.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BringMeBackAPI.Models.Comments.Comment", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("BringMeBackAPI.Models.Reports.Report", b =>
                {
                    b.Navigation("Associates");

                    b.Navigation("Comments");
                });

            modelBuilder.Entity("BringMeBackAPI.Models.Users.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("BringMeBackAPI.Models.Users.CommunityMember", b =>
                {
                    b.Navigation("Donations");
                });

            modelBuilder.Entity("BringMeBackAPI.Models.Users.DonorSupporter", b =>
                {
                    b.Navigation("Donations");
                });

            modelBuilder.Entity("BringMeBackAPI.Models.Users.FamilyMember", b =>
                {
                    b.Navigation("Donations");
                });

            modelBuilder.Entity("BringMeBackAPI.Models.Users.OrganizationUser", b =>
                {
                    b.Navigation("Donations");
                });

            modelBuilder.Entity("BringMeBackAPI.Models.Users.PublicAuthority", b =>
                {
                    b.Navigation("Donations");
                });

            modelBuilder.Entity("BringMeBackAPI.Models.Users.Volunteer", b =>
                {
                    b.Navigation("Donations");
                });
#pragma warning restore 612, 618
        }
    }
}
